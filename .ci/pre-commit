#!/usr/bin/env python

# from project folder:
# ln -s ../../.ci/pre-commit .git/hooks/pre-commit

import os
import re
import subprocess
import sys

modified = re.compile(r"\s*[MA]\s+(?P<name>.*)$")


CHECKS = [
    {
        "output": "Checking for pdbs...",
        "command": 'grep -n -r "import pdb" "{}"',
        "match_files": [r".*"],
        "ignore_files": [r".*pre-commit", r".*\.log$", r".*/.git/.*", r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Checking for ipdbs...",
        "command": 'grep -n "import ipdb" "{}"',
        "match_files": [r".*"],
        "ignore_files": [r".*pre-commit", r".*\.log$", r".*/.git/.*", r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Checking for rdbs...",
        "command": 'grep -n "import rdb" "{}"',
        "match_files": [r".*"],
        "ignore_files": [r".*pre-commit", r".*\.log$", r".*/.git/.*", r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Checking for print statements...",
        "command": 'grep -n "\bprint(\b" "{}"',
        "match_files": [r".*\.py$"],
        "ignore_files": [r".*alembic.*", r".*/scripts/.*", r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Checking for console.log()...",
        "command": "grep -n console.log '{}'",
        "match_files": [r".*yipit/.*\.js$"],
        "ignore_files": [r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Checking for debugger...",
        "command": "grep -n debugger '{}'",
        "match_files": [r".*\.js$"],
        "ignore_files": [r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Running black...",
        "command": "black --check --quiet '{}'",
        "match_files": [r".*\.py$"],
        "ignore_files": [r".*alembic.*", r".*/build/.*"],
        "print_filename": True,
    },
    {
        "output": "Running flake8...",
        "command": "flake8 --max-line-length=88 --ignore=E203,W503 '{}'",
        "match_files": [r".*\.py$"],
        "ignore_files": [r".*alembic.*", r".*snapshots/snap_.*", r".*/build/.*"],
        "print_filename": False,
    },
]


def main(all_files):
    """Run checks on the code that's about to be committed."""

    # stash any changes to the working tree that are not going to be committed
    subprocess.run(["git", "stash", "-u", "--keep-index"])

    try:
        fail = pre_commit(all_files)
    finally:
        # unstash changes to the working tree that we had stashed
        subprocess.call(
            ["git", "reset", "--hard"], stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        subprocess.call(
            ["git", "stash", "pop", "--quiet", "--index"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

    sys.exit(fail)


def pre_commit(all_files):
    """Run checks on a list of files."""

    # list all the files we want to check
    files = []
    if all_files:
        for root, dirs, file_names in os.walk("."):
            for file_name in file_names:
                files.append(os.path.join(root, file_name))
    else:
        p = subprocess.run(
            ["git", "status", "--porcelain"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        out = p.stdout.decode("utf-8")
        for line in out.splitlines():
            match = modified.match(line)
            if match:
                files.append(match.group("name"))

    # exclude submodules, if any
    p = subprocess.run(
        ["git", "config", "--file", ".gitmodules", "--get-regexp", "path"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    out = p.stdout.decode("utf-8")
    submodules = [x.split()[-1] for x in out.split("\n")[:-1]]
    files = list(filter(lambda x: x not in submodules, files))

    # run all the files checks
    fail = False
    for check in CHECKS:
        fail = check_files(files, check)
        if fail:
            return fail

    # run unit tests
    print("Running unit tests...")
    p = subprocess.run(
        ["pytest", "-x", "--cov-report=", "--cov=.", "--cov-branch", "--verbose"]
    )
    fail = p.returncode
    if fail:
        return fail

    return fail  # if we get here, fail is still False


def check_files(files, check):
    fail = False
    print(check["output"])

    for file_name in files:

        to_check = matches_file(file_name, check["match_files"])
        excluded = matches_file(file_name, check.get("ignore_files", []))
        to_check = to_check and not excluded
        if to_check:

            command = check["command"].format(file_name)
            process = subprocess.run(
                command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True
            )
            out = process.stdout.decode("utf-8")
            err = process.stderr.decode("utf-8")

            if out or err:
                prefix = f"\t{file_name if check['print_filename'] else ''}"
                output_lines = [prefix + line for line in out.splitlines()]
                print("\n".join(output_lines))
                if err:
                    print(err)
                fail = True
    return fail


def matches_file(file_name, match_files):
    return any(re.compile(match_file).match(file_name) for match_file in match_files)


if __name__ == "__main__":
    all_files = False
    if len(sys.argv) > 1 and sys.argv[1] == "--all-files":
        all_files = True
    main(all_files)
