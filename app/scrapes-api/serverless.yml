app: pogam

service: pogam-scrapes-api

custom: ${file(../serverless.common.yml):custom}

package: ${file(../serverless.common.yml):package}

provider:
  name: aws
  runtime: python3.8
  memorySize: 192
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        Fn::Join: ["", [Fn::ImportValue: "PhotosBucketArn-${self:custom.stage}" , "/*"]]
    - Sid: SecretsManagerAuroraCredentialsAccess
      Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource:
        Fn::ImportValue: "AuroraSecretArn-${self:custom.stage}"
    - Sid: AuroraDataAPIAccess
      Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
  apiGateway:
    restApiId:
      Fn::ImportValue: "ApiGatewayRestApiId-${self:custom.stage}"
    restApiRootResourceId:
      Fn::ImportValue: "RestApiRootResource-${self:custom.stage}"
    restApiResources:
      /v1:
        Fn::ImportValue: "RestApiVersion1Resource-${self:custom.stage}"

functions:
  run:
    handler: handlers.run
    timeout: 900
    environment:
      AURORA_CLUSTER_ARN:
        Fn::ImportValue: "AuroraClusterArn-${self:custom.stage}"
      AURORA_SECRET_ARN:
        Fn::ImportValue: "AuroraSecretArn-${self:custom.stage}"
      ADMINS_TOPIC_ARN: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:admins-topic-${self:custom.stage}"
      NEW_LISTINGS_TOPIC_ARN: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:new-listings-topic-${self:custom.stage}"
      PROXY11_API_KEY: "${ssm:/pogam/proxy11/token~true}"
      POGAM_DATABASE_URL:
        Fn::Join: ["", ["postgresql+auroradataapi://:@/", Fn::ImportValue: "AuroraDatabaseName-${self:custom.stage}"]]
      BUCKET_NAME:
        Fn::ImportValue: "PhotosBucketName-${self:custom.stage}"
    events:
      - sns:
        Fn::Ref: ScrapeJobsTopic

  create:
    handler: handlers.create
    environment:
      JOBS_TOPIC_ARN: !Ref ScrapeJobsTopic
    events:
      - http:
          path: v1/scrapes
          method: post

resources:
  Description: "CloudFormation template for Pogam's scraping service."

  Resources:
    ScrapeJobsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "scrape-jobs-topic-${self:custom.stage}"
        DisplayName: "Scraping jobs to be processed."
        Subscription:
          - Protocol: lambda
            Endpoint:
              Fn::GetAtt:
                - RunLambdaFunction
                - Arn

    SnsRunPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
            - RunLambdaFunction
            - Arn
        Principal: sns.amazonaws.com
        SourceArn: !Ref ScrapeJobsTopic

  Outputs:
    ScrapeFunctionArn:
      Description: "The ARN for the core scrape lambda function."
      Value:
        Fn::GetAtt:
          - RunLambdaFunction
          - Arn
      Export:
        Name: "ScrapeFunctionArn-${self:custom.stage}"

    ScrapeJobsTopicArn:
      Description: "The ARN for the SNS topic for new scrape jobs."
      Value: !Ref ScrapeJobsTopic
      Export:
        Name: "ScrapeJobsTopicArn-${self:custom.stage}"

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
