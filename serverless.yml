app: pogam
service: pogam

provider:
  name: aws
  runtime: python3.8
  timeout: 900
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:custom.bucket}/"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource: "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"
    - Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: "*"


functions:
  scrape:
    handler: pogam/aws.scrape
    environment:
      BUCKET_NAME: ${self:custom.bucket}
      AURORA_CLUSTER_ARN: "${ssm:/pogam/db/resource-arn~true}"
      AURORA_SECRET_ARN: "${ssm:/pogam/db/secret-arn~true}"
      POGAM_DATABASE_URL: postgresql+auroradataapi://:@/pogam
    events:
      - schedule: rate(1 hour)
      - enabled: true


plugins:
  - serverless-python-requirements

custom:
  bucket: ${env:POGAM_S3_BUCKET_NAME}
  pythonRequirements:
    dockerizePip: non-linux
