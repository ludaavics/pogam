app: pogam
service: pogam


package:
  exclude:
    - ".**"
    - ".**/**"
    - "**/.__pycache__/**"
    - node_modules/**
    - pogam.egg-info/**


provider:
  name: aws
  runtime: python3.8
  timeout: 30
  memorySize: 192
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::pogam*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource: "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"
    - Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: "*"
    - Effect: Allow
      Action: "events:*"
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
    - Effect: Allow
      Action: "ses:SendEmail"
      Resource: "*"


functions:
  # --- Schedules
  schedules_add:
    handler: pogam/aws/schedules.add
    events:
      - http:
          path: schedules
          method: post
    environment:
      STAGE: "${self:custom.stage}"
      SCRAPE_FUNCTION_ARN: "${self:resources.Outputs.ScrapeFunctionArn.Value}"

  schedules_list:
    handler: pogam/aws/schedules.list_
    events:
      - http:
          path: schedules
          method: get
    environment:
      STAGE: "${self:custom.stage}"

  schedules_delete:
    handler: pogam/aws/schedules.delete
    events:
      - http:
          path: schedules/{rule_name}
          method: delete
    environment:
      STAGE: "${self:custom.stage}"


  # --- Scrapers
  scrapers_scrape:
    handler: pogam/aws/scrapers.scrape
    timeout: 900
    environment:
      AURORA_CLUSTER_ARN: "${ssm:/pogam/db/resource-arn~true}"
      AURORA_SECRET_ARN: "${ssm:/pogam/db/secret-arn~true}"
      ADMINS_TOPIC_ARN: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:admins-topic-${self:custom.stage}"
      NEW_LISTINGS_TOPIC_ARN: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:new-listings-topic-${self:custom.stage}"
      POGAM_DATABASE_URL: postgresql+auroradataapi://:@/pogam
      BUCKET_NAME: "${self:resources.Outputs.PhotosBucketName.Value}"

  # --- Notifications
  notifications_admins_slack:
    handler: pogam/aws/notifications/admins.slack
    events:
      - sns:
          topicName: "admins-topic-${self:custom.stage}"
          displayName: Notifications and Alerts for Admins
    environment:
      SLACK_TOKEN: "${ssm:/pogam/slack/token~true}"
      SLACK_ADMIN: "${ssm:/pogam/admins/slack~false}"

  notifications_admins_email:
    handler: pogam/aws/notifications/admins.email
    events:
      - sns:
          topicName: "admins-topic-${self:custom.stage}"
          displayName: Notifications and Alerts for Admins
    environment:
      EMAIL_SENDER: "${ssm:/pogam/email/sender~true}"
      EMAIL_ADMINS: "${ssm:/pogam/admins/email~false}"

  notifications_listings_slack:
    handler: pogam/aws/notifications/listings.slack
    events:
      - sns:
          topicName: "new-listings-topic-${self:custom.stage}"
          displayName: New Listings
          filterPolicy:
            slack:
              - exists: true
    environment:
      SLACK_TOKEN: "${ssm:/pogam/slack/token~true}"

  notifications_listings_email:
    handler: pogam/aws/notifications/listings.email
    events:
      - sns:
          topicName: "new-listings-topic-${self:custom.stage}"
          displayName: New Listings
          filterPolicy:
            emails:
              - exists: true
    environment:
      EMAIL_SENDER: "${ssm:/pogam/email/sender~true}"

resources:
  Resources:
    PhotosBucket:
      Type: AWS::S3::Bucket
    ScrapeFunctionResourcePolicy:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt: ["ScrapersUnderscorescrapeLambdaFunction", "Arn"]
        Principal: events.amazonaws.com
        SourceArn:
          Fn::Sub: 'arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/*'

  Outputs:
    PhotosBucketName:
      Value:
        Ref: PhotosBucket
    PhotosBucketArn:
      Value:
        Fn::GetAtt:
          - PhotosBucket
          - Arn
    ScrapeFunctionArn:
      Description: The ARN for the scrape lambda function
      Value: { "Fn::GetAtt": ["ScrapersUnderscorescrapeLambdaFunction", "Arn"] }


custom:
  stage: ${opt:stage, self.provider.stage, 'dev'}
  pythonRequirements:
    dockerizePip: non-linux


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
